def label = "mypod-${UUID.randomUUID().toString()}"
def serviceaccount = "jenkins-admin"
podTemplate(label: label, serviceAccount: serviceaccount,
containers: [containerTemplate(name: 'maven', image: 'maven:3.3.9-jdk-8-alpine', ttyEnabled: true, command: 'cat'),
              containerTemplate(name: 'git-secrets', image: 'aiindevops.azurecr.io/git-secrets:0.1', ttyEnabled: true, alwaysPullImage: true, command: 'cat'),
			  containerTemplate(name: 'go', image: 'golang:alpine3.9', ttyEnabled: true, command: 'cat'),
			  containerTemplate(name: 'clair-scanner', image: 'aiindevops.azurecr.io/clair-scanner:0.1', ttyEnabled: true, alwaysPullImage: true, command: 'cat', ports: [portMapping(name: 'clair-scanner', containerPort: '9279')],
					volumes: [hostPathVolume(hostPath: '/var/run/docker.sock', mountPath: '/var/run/docker.sock')]),
              containerTemplate(name: 'kubeaudit', image: 'aiindevops.azurecr.io/kube-audit:0.1', ttyEnabled: true, alwaysPullImage: true, command: 'cat'),
              containerTemplate(name: 'kubectl', image: 'smesch/kubectl:1.7.6', ttyEnabled: true, command: 'cat',
                             volumes: [secretVolume(secretName: 'kube-config', mountPath: '/root/.kube')]),
    containerTemplate(name: 'docker', image: 'docker:1.11', ttyEnabled: true, command: 'cat')],
                             volumes: [hostPathVolume(hostPath: '/var/run/docker.sock', mountPath: '/var/run/docker.sock')],
							 imagePullSecrets: [ 'cloveazuresecret' ]
) {
    node(label) {  
        def GIT_URL= 'http://gitlab.ethan.svc.cluster.local:8084/gitlab/root/microservices_java_cartridge.git'
		def GIT_CREDENTIAL_ID ='gitlab'
		def GIT_BRANCH='master'
		
		/***COMPONENT_KEY value should be same as what is given as ProjectName in in sonar.properies file ***/		
		def COMPONENT_KEY='carts';
		def rootDir = pwd()	
		def SONAR_UI='http://sonar.ethan.svc.cluster.local:9001/sonar/api/measures/component?metricKeys=';
		
		/**** provide Sonar metrickeys which needs to be published to Jenkins console ***/
		String metricKeys = "coverage,code_smells,bugs,vulnerabilities,sqale_index,tests,ncloc,quality_gate_details,duplicated_lines_density";
		
		/*** Below variables used in the sonar maven configuration ***/
		def SONAR_SCANNER='org.sonarsource.scanner.maven'
		def SONAR_PLUGIN='sonar-maven-plugin:3.2'
		def SONAR_HOST_URL='http://sonar.ethan.svc.cluster.local:9001/sonar'
		
		/***  DOCKER_HUB_REPO_URL is the URL of docker hub ***/
		def DOCKER_HUB_REPO_URL='aiindevops.azurecr.io'
		def DOCKER_HUB_REPO_NAME='aiindevops.azurecr.io'
		def DOCKER_HUB_ACCOUNT = 'aiindevops.azurecr.io'
		def DOCKER_CREDENTIAL_ID='dockerhub'
        def DOCKER_IMAGE_NAME = 'carts'
        def IMAGE_TAG = '0.4.8'
		
		/*** Kuberenetes  ***/
		def K8S_DEPLOYMENT_NAME = 'carts'
                                           
                
     try {
		
        stage('Git Checkout') {
            git branch: GIT_BRANCH, url: GIT_URL,credentialsId: GIT_CREDENTIAL_ID
            def function = load "${WORKSPACE}/JenkinsFunctions_Java.groovy"
			def Nap = load "${WORKSPACE}/git_scan_nonallowed.groovy"
			def Ap = load "${WORKSPACE}/git_scan_allowed.groovy"
			
			// Below two lines are to publish last commited user name and email into jenkins console logs
            sh 'GIT_NAME=$(git --no-pager show -s --format=\'%an\' $GIT_COMMIT)'
            sh 'GIT_EMAIL=$(git --no-pager show -s --format=\'%ae\' $GIT_COMMIT)'
			
        stage('git-secrets') {
		    container('git-secrets') {
            Nap.nonAllowedPattern()
            Ap.AllowedPattern()	
		    sh 'git secrets --scan'
          }
		}
            container('maven') {
                stage('Build Maven project') {
                   // sh 'mvn clean install'
                   function.buildMethod()
                }
            } 
         // } 
            
			stage('Test') {
                container('maven') {
                function.testMethod()
                }
            } 
                             
                             
            stage('SonarQube analysis') {
              withCredentials([usernamePassword(credentialsId: 'SONAR', passwordVariable: 'PASSWORD', usernameVariable: 'USERNAME')]){
                withSonarQubeEnv('SonarQube') {
                 println('Sonar Method enter');
				function.sonarMethod()                         
                }  
            }    
            }  
            /* Below stage is to publish tools logs to Jenkins console */ 			
            stage('publish') {
                  container ('maven') {
                     String[] metricKeyList = metricKeys.split(",");
                     for(String key : metricKeyList){
                     String var1=SONAR_UI+key+'&componentKey='+COMPONENT_KEY;
                     sh('curl '+'"'+var1+'"');  
                  } 
                }
                    
            } 
			/* Below stage is commented out as veracode is paid tool, hence we have placed the synatx in the Jenkins file , if any client wants use it */
			
			/* stage('Veracode Scanning') {
		    
             withCredentials([usernamePassword(credentialsId: 'dockerhub', passwordVariable: ${VPASSWORD}, usernameVariable: ${VUSER})]) {
             veracode applicationName: ${APPLICATIONNAME}, canFailJob: ${CANFAILJOB}, criticality: ${CRITICALITY}, debug: ${DEBUG}, fileNamePattern: ${FILENAMEPATTERN}, replacementPattern: ${REPLACEMENTPATTERN}, sandboxName: ${SANDBOXNAME}, scanExcludesPattern: ${SCANEXCLUDESPATTERN}, scanIncludesPattern: ${SCANINCLUDESPATTERN}, scanName: ${SCANNAME}, teams: ${TEAMS}, timeout: ${TIMEOUT}, uploadExcludesPattern: ${UPLOADEXCLUDESPATTERN}, uploadIncludesPattern: ${UPLOADINCLUDESPATTERN}, vid: ${VID}, vkey: ${VKEY}, vpassword: ${VPASSWORD}, vuser: ${VUSER}
             }
			 
            }
		   */
            stage (' Create Docker image'){
			    container('docker'){
			    sh ("docker build -t ${DOCKER_HUB_ACCOUNT}/${DOCKER_IMAGE_NAME}:${IMAGE_TAG} .")
				}
			}
			
			stage('Create jenkinslave service') {
            container('kubectl') {
            echo 'Deploying....'
            
            sh """
			echo ${label}
			cat ${WORKSPACE}/clair-scanner.yaml | sed "s/{{parm}}/${label}/g" | kubectl apply -f -
			"""
			
			
			}
        }

            stage ('Docker image scan') {
		      container('clair-scanner') {		
		      sh ("clair-scanner -w 'mywhitelist.yaml' -c 'http://clair:6060' --ip='${label}' -t 'High' ${DOCKER_HUB_ACCOUNT}/${DOCKER_IMAGE_NAME}:${IMAGE_TAG}")
		      		
		       }
            } 

            stage(' Push Docker image') {
             container('docker') {
              withCredentials([[$class: 'UsernamePasswordMultiBinding',
                credentialsId: 'dockerhub',
                usernameVariable: 'DOCKER_HUB_USER',
                passwordVariable: 'DOCKER_HUB_PASSWORD']]) {
                    sh ('docker login -u ${DOCKER_HUB_USER} -p ${DOCKER_HUB_PASSWORD} '+DOCKER_HUB_REPO_URL)
                    sh ("docker push ${DOCKER_HUB_ACCOUNT}/${DOCKER_IMAGE_NAME}:${IMAGE_TAG}")
                }
              }
			} 
			
			stage('Delete jenkinslave service') {
            container('kubectl') {
            sh """
                kubectl delete svc '${label}'
            """
            }
        }

            stage('kube-bench Scan') {
		      container('kubectl') {		
		     sh '''
		       kubectl run --rm -i kube-bench-master-carts-${BUILD_ID} --image=aquasec/kube-bench:latest --restart=Never --overrides="{ \\"apiVersion\\": \\"v1\\", \\"spec\\": { \\"hostPID\\": true, \\"nodeSelector\\": { \\"kubernetes.io/role\\": \\"master\\" }, \\"tolerations\\": [ { \\"key\\": \\"node-role.kubernetes.io/master\\", \\"operator\\": \\"Exists\\", \\"effect\\": \\"NoSchedule\\" } ] } }" -- master --version 1.8
		       kubectl run --rm -i kube-bench-node-carts-${BUILD_ID} --image=aquasec/kube-bench:latest --restart=Never --overrides="{ \\"apiVersion\\": \\"v1\\", \\"spec\\": { \\"hostPID\\": true } }" -- node --version 1.8
		      '''
			  }       
			}			
                             
        
            stage('kube-audit') {
		          container('kubeaudit') {		
		          sh 'kubeaudit -a allowpe'
		        }
            }
			
            stage('Deploy build to Kubernetes') {
              container('kubectl') {
             try{
              sh("kubectl get deployment/${K8S_DEPLOYMENT_NAME} -n sock-shop")
              if(true){
                sh ("kubectl set image deployment/${K8S_DEPLOYMENT_NAME} ${K8S_DEPLOYMENT_NAME}=${DOCKER_HUB_ACCOUNT}/${DOCKER_IMAGE_NAME}:${IMAGE_TAG} -n sock-shop") 
              }
              } 
              catch(e){
              sh("kubectl apply -f sock-shop.yaml -n sock-shop")
              echo "deploying"
              }
              sh ("kubectl get pods -n sock-shop")
              sh ("kubectl rollout status deployment/${K8S_DEPLOYMENT_NAME} -n sock-shop")
              sleep 30 // seconds           
				}
			} 
		
		    }

        currentBuild.result = 'SUCCESS'
        echo "RESULT: ${currentBuild.result}"
        echo "Finished: ${currentBuild.result}"
              
        } catch (Exception err) {
        currentBuild.result = 'FAILURE'
        echo "RESULT: ${currentBuild.result}"
        echo "Finished: ${currentBuild.result}"
               }               
     logstashSend failBuild: false, maxLines: -1
     }
	 
  }
